package com.github.dagugit.algorithm;

/**
 * 不用加减乘除做加法
 * <p>
 * 写一个函数，求两个整数之和，要求在函数体内不得使用+、-、*、/四则运算符号。
 */
public class _48_Add {
    /**
     * 思路：
     * 使用位运算符
     * ^运算符的一个重要应用就是二进制不进位的加法，
     * 而对于进位问题，我们观察到&运算符有11得1的性质，两个数刚好都是1时产生进位，进位数为1，
     * 然后将数字左移一位。所以两个数相加的结果就应该是原位+进位。
     * <p>
     * 1、我们可以用三步走的方式计算二进制值相加： 5-101，7-111
     * 2、第一步：相加各位的值，不算进位，得到010，二进制每位相加就相当于各位做异或操作，101^111。
     * 3、第二步：计算进位值，得到1010，相当于各位做与操作得到101，再向左移一位得到1010，(101&111)<<1。
     * 4、第三步重复上述两步， 各位相加 010^1010=1000，进位值为100=(010&1010)<<1。
     * 5、继续重复上述两步：1000^100 = 1100，进位值为0，跳出循环，1100为最终结果。
     *
     * @param num1
     * @param num2
     * @return
     */
    public int Add(int num1, int num2) {
        //此思路很妙
        while (num1 != 0) {
            int t = num1;
            num1 = (num1 & num2) << 1;
            num2 = t ^ num2;
        }
        return num2;
    }

    public static void main(String[] args) {
        _48_Add add = new _48_Add();
        int add1 = add.Add(2, 4);
        System.out.println(add1);
    }
}
